{"version":3,"sources":["components/Taskcard/Taskcard.js","components/Tasklist/Tasklist.js","components/Header/Header.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Taskcard","taskItem","removeFromTaskList","className","categoryid","category","style","backgroundColor","color","task","taskid","onClick","e","target","parentElement","getAttribute","Tasklist","taskList","createTheme","palette","primary","main","type","length","map","Header","setTask","setCategory","addToTaskList","darkTheme","ThemeProvider","theme","TextField","id","value","onChange","FormControl","variant","Select","labelId","label","MenuItem","preventDefault","App","useState","setTaskList","height","Container","maxWidth","display","flexDirection","justifyContent","prev_taskList","push","taskId","index","findIndex","taskList_temp","splice","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.5bb99780.chunk.js","sourcesContent":["import React from 'react'\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport { createTheme } from '@material-ui/core';\r\nimport './Taskcard.css'\r\n\r\nconst Taskcard = ({taskItem, removeFromTaskList}) => {\r\n    \r\n    return (\r\n        <div>\r\n            {\r\n                <div className='card-container' \r\n                categoryid={taskItem.category}\r\n                style={{backgroundColor:(taskItem.category==='DW')?('red'):('white'), color:'black'}}>\r\n                    <div className='card-content'>\r\n                        <div className='card-title'>\r\n                            <h3>{taskItem.task}</h3>\r\n                        </div>\r\n                        <div className='card-body'>\r\n                            <p>In 1868, Jo March, a teacher in \r\n                            New York City, goes to Mr. Dashwood, an \r\n                            editor who agrees to publish a story she \r\n                            has written.</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='btns'>\r\n                        <div className='btn'>\r\n                            <button>\r\n                                <a> View More </a>\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div className='btn' taskid={taskItem.task}>\r\n                            <button \r\n                            onClick={(e) => {\r\n                            // console.log(e.target.parentElement)\r\n                            removeFromTaskList(e.target.parentElement.getAttribute('taskid'))}}>\r\n                                R\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Taskcard\r\n","import React from 'react'\r\nimport './Tasklist.css'\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport { createTheme } from '@material-ui/core';\r\nimport Taskcard from '../Taskcard/Taskcard';\r\n\r\nconst Tasklist = ({taskList, removeFromTaskList}) => {\r\n\r\n    const darkTheme = createTheme({\r\n        palette: {\r\n          primary:{\r\n              main: \"#fff\"\r\n          },\r\n          type: 'dark',\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div className='taskList'>\r\n            {\r\n                (taskList.length === 0) ?\r\n                (\r\n                    <span className='subTitle'>\r\n                        No tasks!\r\n                    </span>\r\n                ) : (\r\n                    <div className='tasks'>\r\n                        {\r\n                            taskList.map((task) => (\r\n                                <Taskcard \r\n                                taskItem={task} \r\n                                removeFromTaskList={removeFromTaskList}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasklist\r\n","import React from 'react'\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport { createTheme } from '@material-ui/core';\r\nimport { TextField } from '@material-ui/core';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport './Header.css'\r\n\r\nconst Header = ({task, category, setTask, setCategory, addToTaskList}) => {\r\n\r\n    const darkTheme = createTheme({\r\n        palette: {\r\n          primary:{\r\n              main: \"#fff\"\r\n          },\r\n          type: 'dark',\r\n        },\r\n    });\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        addToTaskList();\r\n    }\r\n\r\n    return (\r\n        <div className='header'>\r\n            <span className='title'>DWork</span>\r\n            \r\n                <ThemeProvider theme={darkTheme}>\r\n                    <div className='inputs'>\r\n                        <TextField \r\n                            className=\"taskName\" \r\n                            id=\"outlined-multiline-basic\"\r\n                            value = {task}\r\n                            onChange = {(e)=>{setTask(e.target.value)}}\r\n                        />\r\n\r\n                        {task &&\r\n                            <FormControl variant=\"outlined\" className=''>\r\n                                <Select\r\n                                labelId=\"demo-simple-select-outlined-label\"\r\n                                id=\"demo-simple-select-outlined\"\r\n                                value={category}\r\n                                onChange={(e) => {setCategory(e.target.value)}}\r\n                                label=\"Category\"\r\n                                >\r\n                                    <MenuItem value={10}>Ten</MenuItem>\r\n                                    <MenuItem value={20}>Twenty</MenuItem>\r\n                                    <MenuItem value={30}>Thirty</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        }\r\n\r\n                        {task &&    \r\n                            <button type='submit' onClick={handleSubmit}>\r\n                                S    \r\n                            </button>\r\n                        }\r\n                    </div>  \r\n                </ThemeProvider>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Tasklist from './components/Tasklist/Tasklist'\nimport Header from './components/Header/Header';\nimport { Container } from '@material-ui/core';\n\nimport firebase from 'firebase/app';\n\n\nfunction App() {\n\n  const [task, setTask] = useState('');\n  const [category, setCategory] = useState();\n  const [taskList, setTaskList] = useState([]);\n\n  function addToTaskList() {\n    var taskItem = {}\n    taskItem.task = task\n    taskItem.category = category \n    \n    var prev_taskList = taskList\n    prev_taskList.push(taskItem)\n    setTaskList(prev_taskList)\n    setTask('')\n  }\n\n  var removeFromTaskList = (taskId) => {\n    const index = taskList.findIndex(taskItem => taskItem.task === taskId)\n    var taskList_temp = [...taskList]\n    if(index != -1){\n      taskList_temp.splice(index, 1)\n      setTaskList(taskList_temp)\n    }\n  }\n\n  return (\n    <div className=\"App\" \n    style={{height:'100vh', \n    backgroundColor:\"#404040\",\n    color: \"white\"}}>\n      <Container maxWidth=\"md\" style={{\n        display: 'flex',\n        flexDirection: \"column\",\n        height: '100vh',\n        justifyContent:'space-evenly',\n      }}>\n        <Header task={task} setTask={setTask} setCategory={setCategory} addToTaskList={addToTaskList} />\n        <Tasklist taskList={taskList} removeFromTaskList={removeFromTaskList}/>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}